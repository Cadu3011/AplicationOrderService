// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  OPERATOR
  GUEST
}
enum Status {
  PENDENTE
  CONFIRMED
}
model User{
  id Int @default(autoincrement()) @id
  name String
  pasword String
  roles Role   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ordensServico ServiceOrder []
  stockMovement StockMovement[]
}
model ServiceOrder {
  id         Int      @default(autoincrement()) @id 
  description String
  status     Status
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  products    OrderProduct[]
  userId     Int

  user       User     @relation(fields: [userId], references: [id])
}

model Product {
  id          Int    @id @default(autoincrement())
  name        String
  price       Decimal @db.Decimal(9,2)    // Armazene em centavos para precisão
  quantity    Int    // Quantidade atual em estoque
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  movements   StockMovement[]
 orders      OrderProduct[]
}
model OrderProduct {
  id          Int            @id @default(autoincrement())
  serviceOrderId Int
  productId   Int
  quantity    Int            // Quantidade do produto utilizada na ordem

  serviceOrder ServiceOrder  @relation(fields: [serviceOrderId], references: [id])
  product     Product        @relation(fields: [productId], references: [id])
}
model StockMovement {
  id          Int    @id @default(autoincrement())
  productId   Int
  quantity    Int      // Quantidade movimentada (positiva para entrada, negativa para saída)
  type        String   // "IN" para entrada e "OUT" para saída
  createdAt   DateTime @default(now())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  product     Product  @relation(fields: [productId], references: [id])
}

